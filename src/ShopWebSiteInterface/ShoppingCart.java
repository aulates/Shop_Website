/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ShopWebSiteInterface;
//imports
import Queries.Product;
import Queries.User;
import databaseConnection.DataAccess;
import databaseConnection.DatabaseUtils;
import databaseConnection.Result;
import databaseConnection.ResultSetCustomized;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
/**
 **
 ** @author Ana Elena Ulate Salas
 **/
// Class shopping cart implement tool bar methods
public class ShoppingCart extends javax.swing.JFrame implements ToolBarMethod{
    private DataAccess dataAccess;
    private int id;
    private int idUserProducts;
    private int amountProduct;
    private int idSeller;
    Product product = new Product();
    User user = new User();
    /**
     ** Creates new form ShoppingCart
     **/
    //Constructor
    public ShoppingCart(DataAccess dataAccess) {
        initComponents();
        setLocationRelativeTo(null);
        this.dataAccess = dataAccess;
        loadData();
        enableRowSelectionListener();
    }
    //method to go to the principal menu
    public void menuBack(){
        setVisible(false);
        MainMenu mm = new MainMenu(dataAccess);
        mm.setVisible(true);
    }
    // method to load data into the Shopping cart table
    public void loadData(){
        ResultSetCustomized rs;
        rs = user.currentUser(dataAccess);
        int idUser = 0;
                try {
                    if (rs.getResultSet().next()) {
                    idUser = rs.getResultSet().getInt("id");
                    
                     }
        } catch (Exception e) {
        }
        rs = product.getAllProduct(dataAccess, idUser );
        if(rs.isError()){
            JOptionPane.showMessageDialog(this, rs.getErrorDescription(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            DefaultTableModel model = DatabaseUtils.getDefaultTableModel(rs.getResultSet(), product.getIdentifiersCostum());
            tProducts.setModel(model);
            model.fireTableDataChanged();
            tProducts.removeColumn(tProducts.getColumnModel().getColumn(2));
            tProducts.removeColumn(tProducts.getColumnModel().getColumn(1));
            tProducts.removeColumn(tProducts.getColumnModel().getColumn(0));
        }
    }
    // Method to allow selection of a row
    private void enableRowSelectionListener(){
        ListSelectionModel lsm = tProducts.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsm.addListSelectionListener((ListSelectionEvent e) -> {
            if (tProducts.getSelectedRow() >= 0)
                updateWithSelectedRow(tProducts.getSelectedRow());
        });
        this.selectFirstRowifExist();
    }
    // method to select the fisrt row if this exist
    private void selectFirstRowifExist(){
        if(tProducts.getRowCount() > 0)
            tProducts.setRowSelectionInterval(0, 0);
    }
    // method to update the selected row
    private void updateWithSelectedRow(int index){
        try {
            this.idUserProducts = (Integer)tProducts.getModel().getValueAt(index, 0);
            this.id = (Integer) tProducts.getModel().getValueAt(index, 1);
            this.idSeller = (Integer) tProducts.getModel().getValueAt(index, 2);
            this.amountProduct = (Integer) tProducts.getModel().getValueAt(index, 7);
        } catch (Exception e) {
            id = 0;
        }
    }
    private void comment(){
        MakeComment mc = new MakeComment(dataAccess, idUserProducts);
        setVisible(false);
        mc.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tProducts = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btBuy = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btUpDate = new javax.swing.JButton();
        cbAmount = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miBack = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tProducts.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tProducts);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Amount:");

        btBuy.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btBuy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/shop-cart-apply-icon.png"))); // NOI18N
        btBuy.setText("Buy");
        btBuy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btBuy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuyActionPerformed(evt);
            }
        });

        btDelete.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        btDelete.setText("Delete");
        btDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btUpDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btUpDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Refresh.png"))); // NOI18N
        btUpDate.setText("Update");
        btUpDate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btUpDate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btUpDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpDateActionPerformed(evt);
            }
        });

        cbAmount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btUpDate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                .addComponent(btBuy)
                .addGap(41, 41, 41))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btBuy)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btDelete, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btUpDate, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(31, 31, 31))
        );

        jMenu1.setText("Option");

        miBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/go-back-icon.png"))); // NOI18N
        miBack.setText("Back");
        miBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBackActionPerformed(evt);
            }
        });
        jMenu1.add(miBack);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBackActionPerformed
        menuBack();
    }//GEN-LAST:event_miBackActionPerformed

    private void btBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuyActionPerformed
        comment();
        addBuy();
    }//GEN-LAST:event_btBuyActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        cancelBuy();
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpDateActionPerformed
        reloadBuy();
    }//GEN-LAST:event_btUpDateActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        JOptionPane.showMessageDialog(null, "The program most be started in main class", "Warning", JOptionPane.WARNING_MESSAGE);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBuy;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btUpDate;
    private javax.swing.JComboBox<String> cbAmount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miBack;
    private javax.swing.JTable tProducts;
    // End of variables declaration//GEN-END:variables
    //ToolBarMethods
    @Override
    public boolean jbNewActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbEditActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbSaveActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbCancelActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbDeleteActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbFindActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbFilterActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbReloadActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    @Override
    public boolean jbExitActionPerfomed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    //method to finish the buy
    @Override
    public void addBuy() {
        ResultSetCustomized result;
        result = user.currentUser(dataAccess);
        int idUser = 0;
        int amount = Integer.parseInt(cbAmount.getSelectedItem().toString());
        int choosed = this.amountProduct - amount;
        try {
            if (result.getResultSet().next()) {
            idUser = result.getResultSet().getInt("id");
            }         
        } catch (Exception e) {
        }
        result = product.getAmount(dataAccess, id);
        try {
            if (result.getResultSet().next()) {
            amountProduct = result.getResultSet().getInt("amount");
            }         
        } catch (Exception e) {
        }
        int remaning = this.amountProduct - amount;
        System.out.println(remaning);
        if(remaning < 0){
            JOptionPane.showMessageDialog(this, "Not enough amount of this product.", "Information!", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            
            product.boughtProduct(dataAccess, true, idUserProducts);
            product.updateUserProductAmountByIdSeller(dataAccess, remaning, id);
            JOptionPane.showMessageDialog(this, "Your shopping is finished, it will reach your home in a maximmum time of a month", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        if (remaning == 0) {
            //product.deleteUserProduct(dataAccess,idUserProducts);
        }
        loadData();
    }
    // method to delete the product of the buy
    @Override
    public void cancelBuy() {
        if(tProducts.getSelectedRow() >= 0){
            if(JOptionPane.showConfirmDialog(this, "Are you sure, you want to delet this product?", "Information!",
                    JOptionPane.YES_NO_OPTION , JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION){
                int temp = this.idUserProducts;
                Result result = product.deleteUserProduct(dataAccess, temp);
                if(!result.isError()){
                    product.deleteProduct(dataAccess, temp);
                }
                else{
                    JOptionPane.showMessageDialog(this, result.getErrorDescription(), "Error", JOptionPane.ERROR_MESSAGE);
                   }
            }
            loadData();
            this.selectFirstRowifExist();
        }
        else{
            JOptionPane.showMessageDialog(this, "You must select the row to delete it", "Information!", JOptionPane.INFORMATION_MESSAGE);    
        }
        loadData();
    }
    //method to update the amount product
    @Override
    public void reloadBuy() {
        product.updateUserProductAmountByUserProductId(dataAccess, Integer.parseInt(cbAmount.getSelectedItem().toString()), idUserProducts);
        loadData();
    }
}