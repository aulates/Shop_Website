/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ShopWebSiteInterface;

import Enums.CancelButtonState;
import Enums.ExitButtonState;
import Enums.FilterButtonState;
import Enums.ReloadButtonState;
import Enums.NewButtonState;
import Enums.FindButtonState;
import Enums.DeleteButtonState;
import Enums.EditButtonState;
import Enums.SaveButtonState;
import java.awt.Container;
import javax.swing.JOptionPane;
/**
 **
 ** @author Ana Elena Ulate Salas
 **/
public class Toolbar extends javax.swing.JPanel {
    
    private ToolBarInterface jifWTParent;
    private boolean toolbarOnFilteredMode;
    private boolean toolbarOnFindingMode;
    
    private boolean inserting;
    private boolean updating;
    private boolean filtered;

    /**
     * Creates new form JPanelCRUDToolBar
     */
    public Toolbar() {
        initComponents();
        this.toolbarOnFilteredMode = false;
        this.toolbarOnFindingMode = false;
        this.inserting = false;
        this.updating = false;
        this.filtered = false;
        
        this.jtbCRUDToolBar.setFloatable(false);
        this.defaultModeStateOfButtons();
        this.setVisibilityFindAndFilterButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtbCRUDToolBar = new javax.swing.JToolBar();
        jbNew = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jbFind = new javax.swing.JButton();
        jbFilter = new javax.swing.JButton();
        jbReload = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();

        jbNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/New.png"))); // NOI18N
        jbNew.setText("New");
        jbNew.setFocusable(false);
        jbNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbNew);

        jbEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Modify.png"))); // NOI18N
        jbEdit.setText("Modify");
        jbEdit.setFocusable(false);
        jbEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbEdit);

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Save.png"))); // NOI18N
        jbSave.setText("Save");
        jbSave.setFocusable(false);
        jbSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });
        jtbCRUDToolBar.add(jbSave);

        jbCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Cancel.png"))); // NOI18N
        jbCancel.setText("Cancel");
        jbCancel.setFocusable(false);
        jbCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbCancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jtbCRUDToolBar.add(jbCancel);

        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Delete.png"))); // NOI18N
        jbDelete.setText("Delete");
        jbDelete.setFocusable(false);
        jbDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbDelete);

        jbFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Find.png"))); // NOI18N
        jbFind.setText("Search");
        jbFind.setFocusable(false);
        jbFind.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbFind.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbFind);

        jbFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Filter.png"))); // NOI18N
        jbFilter.setText("Filtrer");
        jbFilter.setFocusable(false);
        jbFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbFilter);

        jbReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Refresh.png"))); // NOI18N
        jbReload.setText("Refresh");
        jbReload.setFocusable(false);
        jbReload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbReload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbReload);

        jbExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Exit.png"))); // NOI18N
        jbExit.setText("Exit");
        jbExit.setFocusable(false);
        jbExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jtbCRUDToolBar.add(jbExit);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbCRUDToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jtbCRUDToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbCancelActionPerformed

    // <editor-fold defaultstate="collapsed" desc="Toolbar listeners">
    /**
     * Programa los Listeners que hace funcionar el JPanelCRUDToolbar en un
 JInternalFrameWithToolbar gracias a los métodos de la interfaz
 CRUDToolBarActions. 
     */
    public void setToolBarListeners(){
        this.jifWTParent = getJIntenalFrameParent();
        this.jbNew.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbNewActionPerformed(evt);
        });
        this.jbEdit.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbEditActionPerformed(evt);
        });
        this.jbSave.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbSaveActionPerformed(evt);
        });
        this.jbCancel.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbCancelActionPerformed(evt);
        });
        this.jbDelete.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbDeleteActionPerformed(evt);
        });
        this.jbFind.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbFindActionPerformed(evt);
        });
        this.jbFilter.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbFilterActionPerformed(evt);
        });
        this.jbReload.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbReloadActionPerformed(evt);
        });
        this.jbExit.addActionListener((java.awt.event.ActionEvent evt) -> {
            this.jbExitActionPerformed(evt);
        });
    }
    /**
     * Establece el estado de los botones del Toolbar
     * 
     * @param newBS estado del botón New
     * @param saveBS estado del botón Save
     * @param editBS estado del botón Edit
     * @param cancelBS estado del botón Cancel
     * @param deleteBS estado del botón Delete
     * @param findBS estado del botón Find
     * @param filterBS estado del botón Filter
     * @param reloadBS estado del botón Reload
     * @param exitBS  estado del botón Exit
     */
    private void setStateOfButtons(NewButtonState newBS, SaveButtonState saveBS,EditButtonState editBS, CancelButtonState cancelBS,DeleteButtonState deleteBS, FindButtonState findBS,FilterButtonState filterBS, ReloadButtonState reloadBS, ExitButtonState exitBS){
        this.jbNew.setEnabled(newBS.isEnable());
        this.jbEdit.setEnabled(editBS.isEnable());
        this.jbSave.setEnabled(saveBS.isEnable());
        this.jbCancel.setEnabled(cancelBS.isEnable());
        this.jbDelete.setEnabled(deleteBS.isEnable());
        this.jbFind.setEnabled(findBS.isEnable());
        this.jbFilter.setEnabled(filterBS.isEnable());
        this.jbReload.setEnabled(reloadBS.isEnable());
        this.jbExit.setEnabled(exitBS.isEnable());
    }
    /**
     * Establece el estado por defecto de los botones del Toolbar
     */
    private void defaultModeStateOfButtons(){
        this.setStateOfButtons(
            NewButtonState.Enable, SaveButtonState.Disable, 
            EditButtonState.Enable, CancelButtonState.Disable, 
            DeleteButtonState.Enable, 
            this.toolbarOnFindingMode ? FindButtonState.Disable : FindButtonState.Enable, 
            this.toolbarOnFindingMode ? FilterButtonState.Enable : FilterButtonState.Disable, 
            ReloadButtonState.Enable, ExitButtonState.Enable);
       }
    
    /**
     * Estable el estado de los botones para el modo de efición
     */
    private void editingModeStateOfButtons(){
        this.setStateOfButtons(
            NewButtonState.Disable, SaveButtonState.Enable, 
            EditButtonState.Disable, CancelButtonState.Enable, 
            DeleteButtonState.Disable, FindButtonState.Disable,
            FilterButtonState.Disable, ReloadButtonState.Disable,
            ExitButtonState.Enable);
    }
    
    /**
     * Estable el estado de los botones para el modo de búsqueda
     */
    private void findingModeStateOfButtons(){
        this.setStateOfButtons(
            NewButtonState.Disable, SaveButtonState.Disable, 
            EditButtonState.Disable, CancelButtonState.Enable, 
            DeleteButtonState.Disable, FindButtonState.Disable, 
            FilterButtonState.Enable, ReloadButtonState.Disable, 
            ExitButtonState.Enable);
    }
    /**
     * Estable la visibilidad de los botones de búsqueda y filtrado
     */
    private void setVisibilityFindAndFilterButtons(){
        if (this.toolbarOnFindingMode)
            this.jbFind.setVisible(false);
        else
            this.jbFind.setVisible(true);
        
        if (this.toolbarOnFilteredMode || !this.toolbarOnFindingMode)
            this.jbFilter.setVisible(false);
        else
            this.jbFilter.setVisible(true);
    }
    private void jbNewActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbNewActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.inserting = true;
            this.editingModeStateOfButtons();
        }
    }                                     

    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbEditActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.updating = true;
            this.editingModeStateOfButtons();
        }
    }                                      

    private void jbSaveActionPerfomed(java.awt.event.ActionEvent evt) {                                       
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbSaveActionPerfomed(evt))
        {
            // Código por defecto para el comportamiento del Toolbar
            this.defaultModeStateOfButtons();
            
            // Se restablece el estado por defecto solo si el método 
            // anterior terminó satisfactoriamente
            this.inserting = false;
            this.updating = false;
        }
    }                                      

    private void jbCancelActionPerfomed(java.awt.event.ActionEvent evt) {                                         
        // Código por defecto para el comportamiento del Toolbar
        this.toolbarOnFindingMode = false;
        this.defaultModeStateOfButtons();
        this.setVisibilityFindAndFilterButtons();
        
        // Invocar al código específico del formulario
        this.jifWTParent.jbCancelActionPerfomed(evt);
        
        // Se restablece el estado por defecto solo si el método anterior no
        // terminó anticipadamente
        this.inserting = false;
        this.updating = false;
    }                                        

    private void jbDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbDeleteActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.defaultModeStateOfButtons();
        }
    }                                        

    private void jbFindActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbFindActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.toolbarOnFindingMode = true;
            this.toolbarOnFilteredMode = false;
            this.findingModeStateOfButtons();
            this.setVisibilityFindAndFilterButtons();
        }
    }                                      

    private void jbFilterActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbFilterActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.toolbarOnFindingMode = false;
            this.toolbarOnFilteredMode = true;
            this.filtered = true;
            this.defaultModeStateOfButtons();
            this.setVisibilityFindAndFilterButtons();
        }
    }                                        

    private void jbReloadActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Invocar al código específico del formulario
        if (this.jifWTParent.jbReloadActionPerfomed(evt)){
            // Código por defecto para el comportamiento del Toolbar
            this.toolbarOnFilteredMode = false;
            this.filtered = false;
            this.defaultModeStateOfButtons();
        }
    }                                        

    private void jbExitActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // Código por defecto para el comportamiento del Toolbar
        if (this.jifWTParent.jbExitActionPerfomed(evt)){
            this.jifWTParent.dispose();
        }
    }
    /**
     * Retorna el JInternalFrameWithToolbar padre de un componente
     * 
     * @param component Cualquier componente que podría estar subcontenido en un JInternalFrame
     * @return 
     */
    private ToolBarInterface getJIntenalFrameParent(){
        Container container = this;
        while (container.getParent() != null 
                && !(container instanceof ToolBarInterface))
        {
          container = container.getParent();
        }
        return (ToolBarInterface)container;
    }
    /**
     * Evalúa si el usuario desea elimiar o no el filtrado de registros cuando
     * se ha detectado que está habilitado.
     */
    public void evalIfDisableFilter(){
        if (this.isFiltered())
        {
            if (JOptionPane.showConfirmDialog(
                    this,"El formulario está filtrado, de manera que los "
                            + "registros \nnuevos o modificados podrían no "
                            + "visualizarse en la \ntabla. ¿Desea cancelar "
                            + "el filtro ahora?","Confirmación",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION)
            {
                // Se cancela el filtro
                this.filtered = false;
            }
        }
    }
    
    public boolean isInserting() {
        return inserting;
    }

    public boolean isUpdating() {
        return updating;
    }
    
    public boolean isFiltered() {
        return filtered;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jbCancel;
    public javax.swing.JButton jbDelete;
    public javax.swing.JButton jbEdit;
    public javax.swing.JButton jbExit;
    public javax.swing.JButton jbFilter;
    private javax.swing.JButton jbFind;
    public javax.swing.JButton jbNew;
    public javax.swing.JButton jbReload;
    public javax.swing.JButton jbSave;
    private javax.swing.JToolBar jtbCRUDToolBar;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>
}
